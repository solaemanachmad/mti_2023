# -*- coding: utf-8 -*-
"""scoring_fuzzy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IFw_0bXO-6In89gBYABC6qv109dvxvm3
"""

!pip install scikit-fuzzy

import pandas as pd
import numpy as np
from tabulate import tabulate
import itertools
import matplotlib.pyplot as plt
import skfuzzy as fuzz

"""# Pre-Processing Data"""

data = pd.read_csv('/content/drive/MyDrive/MTI/SMT2/TIF226203 - Sistem Cerdas/uts/dataset/stocks.csv')

def weighted_average(group, cols):
    years = group['Year'].values
    latest_year = max(years)
    weights = [len(years) - (latest_year - year) for year in years]
    weighted_avgs = {}
    for col in cols:
        weighted_sum = sum(group[col] * weights)
        total_weights = sum(weights)
        weighted_avg = weighted_sum / total_weights
        weighted_avgs[col] = weighted_avg
    return pd.Series(weighted_avgs)
cols_to_average = ['PER', 'DER', 'PBV', 'CR']
weighted_data = data.groupby('Stock').apply(lambda x: weighted_average(x, cols_to_average))

print (weighted_data)

statistics = weighted_data.describe().loc[['mean', 'std', 'min', 'max']]
statistics.loc['std min'] = statistics.loc['mean'] - statistics.loc['std']
statistics.loc['std max'] = statistics.loc['mean'] + statistics.loc['std']

new_index_order = ['mean', 'std', 'min', 'std min', 'std max', 'max']
statistics = statistics.reindex(new_index_order)
headers = ["Statistics", "PER", "DER", "PBV", "CR" ]

statistics = statistics.round(2)

print(tabulate(statistics, headers=headers))

"""# Himpunan Fuzzy"""

from tabulate import tabulate

def create_fuzzy_params(mean, std, min, max):
    if mean - std < min or mean + std > max:
        std = std / 2
    L = [0, 0, round(min, 2), round(mean - std, 2)]
    M = [round(min, 2), round(mean - std, 2), round(mean + std, 2), round(max, 2)]
    b = round(mean + std + max_val)
    H = [round(mean + std, 2), round(max, 2), b, b]
    return L, M, H

fuzzy_params = {}
for attr, values in statistics.items():
    mean = values['mean']
    std = values['std']
    min_val = values['min']
    max_val = values['max']
    fuzzy_params[attr] = create_fuzzy_params(mean, std, min_val, max_val)

headers = ["Attribute", "L", "M", "H"]
fuzzy_numbers = []
for attr, params in fuzzy_params.items():
    fuzzy_numbers.append([attr, params[0], params[1], params[2]])

print(tabulate(fuzzy_numbers, headers=headers))

"""# Fuzzy Rules"""

per_min = fuzzy_numbers[0][1][2]
per_meanminussd = fuzzy_numbers[0][2][1]
per_meanplussd = fuzzy_numbers[0][3][0]
per_max = fuzzy_numbers[0][3][1]
per_limit = fuzzy_numbers[0][3][3]

der_min = fuzzy_numbers[1][1][2]
der_meanminussd = fuzzy_numbers[1][2][1]
der_meanplussd = fuzzy_numbers[1][3][0]
der_max = fuzzy_numbers[1][3][1]
der_limit = fuzzy_numbers[1][3][3]

pbv_min = fuzzy_numbers[2][1][2]
pbv_meanminussd = fuzzy_numbers[2][2][1]
pbv_meanplussd = fuzzy_numbers[2][3][0]
pbv_max = fuzzy_numbers[2][3][1]
pbv_limit = fuzzy_numbers[2][3][3]

cr_min = fuzzy_numbers[3][1][2]
cr_meanminussd = fuzzy_numbers[3][2][1]
cr_meanplussd = fuzzy_numbers[3][3][0]
cr_max = fuzzy_numbers[3][3][1]
cr_limit = fuzzy_numbers[3][3][3]

import itertools

linguistic_terms = {
    'PER': {'L': 1, 'M': 0.5, 'H': 0},
    'PBV': {'L': 1, 'M': 0.5, 'H': 0},
    'DER': {'L': 0, 'M': 0.5, 'H': 1},
    'CR': {'L': 0, 'M': 0.5, 'H': 1},
}

linguistic_combinations = list(itertools.product(*linguistic_terms.values()))

rules = []
for i, combination in enumerate(linguistic_combinations, start=1):
    rule = {'Rule': i}
    for j, attribute in enumerate(linguistic_terms.keys()):
        rule[attribute] = combination[j]

    w_score = sum(linguistic_terms[attribute][rule[attribute]] for attribute in linguistic_terms.keys()) / len(linguistic_terms)
    rule['W'] = w_score

    if w_score < 0.2:
        rule['Score'] = 'L'
    elif 0.2 <= w_score < 0.4:
        rule['Score'] = 'RL'
    elif 0.4 <= w_score <= 0.6:
        rule['Score'] = 'M'
    elif 0.6 <= w_score < 0.8:
        rule['Score'] = 'RH'
    else:
        rule['Score'] = 'H'

    rules.append(rule)

rules_df = pd.DataFrame(rules)

print(tabulate(rules_df, headers='keys', tablefmt='github'))

"""# Inference of Fuzzy Rules"""

per_low = fuzz.trapmf(np.arange(0, per_limit, 1), [0, 0, per_min, per_meanminussd])
per_mid = fuzz.trapmf(np.arange(0, per_limit, 1), [per_min, per_meanminussd, per_meanplussd, per_max])
per_high = fuzz.trapmf(np.arange(0, per_limit, 1), [per_meanplussd, per_max, per_limit, per_limit])

pbv_low = fuzz.trapmf(np.arange(0, pbv_limit, 0.01), [0, 0, pbv_min, pbv_meanminussd])
pbv_mid = fuzz.trapmf(np.arange(0, pbv_limit, 0.01), [pbv_min, pbv_meanminussd, pbv_meanplussd, pbv_max])
pbv_high = fuzz.trapmf(np.arange(0, pbv_limit, 0.01), [pbv_meanplussd,pbv_max, pbv_limit, pbv_limit])

der_low = fuzz.trapmf(np.arange(0, der_limit, 0.01), [0, 0, der_min, pbv_meanminussd])
der_mid = fuzz.trapmf(np.arange(0, der_limit, 0.01), [der_min, der_meanminussd, der_meanplussd, der_max])
der_high = fuzz.trapmf(np.arange(0, der_limit, 0.01), [der_meanplussd, der_max, der_limit, der_limit])

cr_low = fuzz.trapmf(np.arange(0, cr_limit, 0.01), [0, 0, cr_min, cr_meanminussd])
cr_mid = fuzz.trapmf(np.arange(0, cr_limit, 0.01), [cr_min, cr_meanminussd, cr_meanplussd, cr_max])
cr_high = fuzz.trapmf(np.arange(0, cr_limit, 0.01), [cr_meanplussd, cr_max, cr_limit, cr_limit])

def score_per(per):
    if per <= per_min:
        return 0
    elif per >= per_max:
        return 1
    else:
        return (per - per_min) / (per_max - per_min)

def score_pbv(pbv):
    if pbv <= pbv_min:
        return 1
    elif pbv >= pbv_max:
        return 0
    else:
        return (pbv_max - pbv) / (pbv_max - pbv_min)

def score_der(der):
    if der <= der_min:
        return 1
    elif der >= der_max:
        return 0
    else:
        return (der_max - der) / (der_max - der_min)

def score_cr(cr):
    if cr <= cr_min:
        return 0
    elif cr >= cr_max:
        return 1
    else:
        return (cr - cr_min) / (cr_max - cr_min)

"""# Defuzzyfication and Testing"""

test_data = pd.read_csv('/content/drive/MyDrive/MTI/SMT2/TIF226203 - Sistem Cerdas/uts/dataset/test_data.csv')

test_data['W'] = (test_data['PER'].apply(score_per) + test_data['DER'].apply(score_der) + test_data['PBV'].apply(score_pbv) + test_data['CR'].apply(score_cr)) / 4
print(test_data)

df = pd.DataFrame(test_data)
total_weights = df['W'].sum()
df['Normal Weight'] = df['W']/total_weights
df['Normal Weight'] = df['Normal Weight'].round(4)
sorted_df = df.sort_values(by='W', ascending=False).reset_index(drop=True)
sorted_df['Ranking'] = df.index + 1
print(sorted_df)

def get_score(w):
    if w >= 0.8:
        return 'H'
    elif w >= 0.6:
        return 'RH'
    elif w >= 0.4:
        return 'M'
    elif w >= 0.2:
        return 'RL'
    else:
        return 'L'

sorted_df['Score'] = sorted_df['W'].apply(get_score)

print(sorted_df)

"""# Visualization"""

def RangeSub (_low, _high, _step):
  subjective = np.arange(_low, _high, _step)
  return subjective

def LinguisticTerm(_rule, _range_subjective, _title):
  lo = fuzz.trapmf(_range_subjective, _rule[0])
  mi = fuzz.trapmf(_range_subjective, _rule[1])
  hi = fuzz.trapmf(_range_subjective, _rule[2])

  fig, ax = plt.subplots(nrows=1, figsize=(6,3))
  ax.plot(_range_subjective, lo, 'b', linewidth=1.5, label ="Low")
  ax.plot(_range_subjective, mi, 'g', linewidth=1.5, label ="Mid")
  ax.plot(_range_subjective, hi, 'r', linewidth=1.5, label ="High")

  ax.set_title(_title)
  ax.legend()

  ax.spines['top'].set_visible(False)
  ax.spines['right'].set_visible(False)
  ax.get_xaxis().tick_bottom()
  ax.get_yaxis().tick_left()

  plt.tight_layout()
  plt.show()

  return lo, mi, hi

xpe = RangeSub (0, 76, 1)
rpe = np.array([
    [0, 0, 0.92, 8.2],
    [0.92, 8.2, 32.32, 43.37],
    [32.32, 43.37, 76, 76]
])
lo_pe, mi_pe, hi_pe = LinguisticTerm(rpe, xpe, 'PER')

xder = RangeSub (0, 4, 0.01)
rder = np.array([
    [0, 0, 0.08, 0.1],
    [0.08, 0.1, 1.3, 2.7],
    [1.3, 2.7, 4, 4]
])
lo_der, mi_der, hi_der = LinguisticTerm(rder, xder, 'DER')

xpbv = RangeSub (0, 74, 1)
rpbv = np.array([
    [0, 0, 0.37, 0.79],
    [0.37, 0.79, 13.95, 59.68],
    [13.95, 59.68, 74, 74]
])
lo_pbv, mi_pbv, hi_pbv = LinguisticTerm(rpbv, xpbv, 'PBV')

xcr = RangeSub (0, 11, 0.1)
rcr = np.array([
    [0, 0, 0.6, 1.21],
    [0.6, 1.21, 4.39, 7.01],
    [4.39, 7.01, 11, 11]
])
lo_cr, mi_cr, hi_cr = LinguisticTerm(rcr, xcr, 'CR')

from mpl_toolkits.mplot3d import Axes3D

vis = sorted_df['W']

w_min = min(vis)
w_max = max(vis)

def fuzzy_membership(w, a, b, c):
    low = np.maximum(0, np.minimum((w - a) / (b - a), 1))
    medium = np.maximum(0, np.minimum((c - w) / (c - b), (w - b) / (b - a)))
    high = np.maximum(0, np.minimum((w - c) / (w_max - c), 1))
    return low, medium, high

x = np.linspace(w_min, w_max, 100)
y = np.arange(len(vis))
X, Y = np.meshgrid(x, y)
Z_low, Z_medium, Z_high = fuzzy_membership(X, w_min, 0.5, 0.7)

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, np.array(Z_low), rstride=1, cstride=1, color=np.array([0, 0, 1, 0.5]), label='L')
ax.plot_surface(X, Y, np.array(Z_medium), rstride=1, cstride=1, color=np.array([0, 1, 0, 0.5]), label='M')
ax.plot_surface(X, Y, np.array(Z_high), rstride=1, cstride=1, color=np.array([1, 0, 0, 0.5]), label='L')
ax.set_xlabel('W')
ax.set_ylabel('Data')
ax.set_zlabel('Fuzzy')
plt.show()